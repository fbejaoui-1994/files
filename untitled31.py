# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ToSrk-g3BYSztDLKmM_TggtgFwyuCF6O
"""

import pandas as pd
import numpy as np

data=pd.read_csv('/content/wine_quality_classification.csv')

!pip install ydata-profiling
from ydata_profiling import ProfileReport
profile=ProfileReport(data,title="Pandas Profiling Report")
profile_to_html = profile.to_html()

profile.to_file("pandas_profiling_report.html")

numerical_columns=data.select_dtypes(include="int64").columns
categorical_columns=data.select_dtypes(include="object").columns

data.isnull().sum()

data.duplicated().sum()

data.head()

def count_outliers_iqr(column):
  """Counts outliers using the IQR method."""
  q1 = column.quantile(0.25)
  q3 = column.quantile(0.75)
  iqr = q3 - q1
  lower_bound = q1 - 1.5 * iqr
  upper_bound = q3 + 1.5 * iqr
  outliers = column[(column < lower_bound) | (column > upper_bound)]
  return len(outliers)

numerical_columns = data.select_dtypes(include=np.number).columns

for column in numerical_columns:
  outlier_count = count_outliers_iqr(data[column])
  percentage_outliers = (outlier_count / len(data[column])) * 100
  print(f"Percentage of outliers in '{column}': {percentage_outliers:.2f}%")

columns=data.columns
for i in columns:
  print(i)
  print(data[i].unique())

print(columns)

import seaborn as sns
import matplotlib.pyplot as plt

# Set a modern Seaborn style
sns.set(style="whitegrid")

# Define the figure
plt.figure(figsize=(10, 7))

# Use a more appealing color palette
palette = sns.color_palette("Set2")

# Create the count plot with sorted order
order = data['quality_label'].value_counts().index
ax = sns.countplot(
    x='quality_label',
    data=data,
    order=order,
    palette=palette
)

# Annotate each bar with the count and percentage
total = len(data)
for p in ax.patches:
    count = p.get_height()
    percentage = f'{100 * count / total:.1f}%'
    x = p.get_x() + p.get_width() / 2
    y = count
    ax.annotate(f'{count}\n({percentage})', (x, y), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Customize titles and labels
plt.title('Distribution of Wine Quality Labels', fontsize=16, fontweight='bold')
plt.xlabel('Quality Label', fontsize=12)
plt.ylabel('Count', fontsize=12)

# Add some spacing and style
plt.tight_layout()
plt.show()



import seaborn as sns
import matplotlib.pyplot as plt

# Set a modern style
sns.set(style="whitegrid")

# Define figure size
plt.figure(figsize=(12, 8))

# Create scatter plot with enhancements
scatter = sns.scatterplot(
    x='alcohol',
    y='density',
    data=data,
    hue='quality_label',  # Optional: differentiate by quality if available
    palette='coolwarm',
    alpha=0.7,
    edgecolor='w',
    s=100  # marker size
)

# Improve the aesthetics
plt.title('Alcohol Content vs. Density of Wine Samples', fontsize=18, fontweight='bold')
plt.xlabel('Alcohol (%)', fontsize=14)
plt.ylabel('Density (g/cm³)', fontsize=14)

# Enhance legend
if 'quality_label' in data.columns:
    plt.legend(title='Quality Label', title_fontsize=12, fontsize=10, loc='upper right')

# Add grid and style tweaks
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()

# Show the plot
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Set a modern aesthetic style
sns.set(style="whitegrid")

# Define a color palette
palette = sns.color_palette("crest")

# --- Alcohol Histogram ---
plt.figure(figsize=(12, 7))
sns.histplot(
    data=data,
    x='alcohol',
    kde=True,
    color=palette[4],
    bins=30,
    edgecolor='black',
    alpha=0.8
)
plt.title('Distribution of Alcohol Content in Wines', fontsize=18, fontweight='bold')
plt.xlabel('Alcohol (%)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

# --- Residual Sugar Histogram ---
plt.figure(figsize=(12, 7))
sns.histplot(
    data=data,
    x='residual_sugar',
    kde=True,
    color=palette[2],
    bins=30,
    edgecolor='black',
    alpha=0.8
)
plt.title('Distribution of Residual Sugar in Wines', fontsize=18, fontweight='bold')
plt.xlabel('Residual Sugar (g/dm³)', fontsize=14)
plt.ylabel('Frequency', fontsize=14)
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

quality_labeled = {'low': 0, 'medium': 1, 'high': 2}
data['quality_label'] = data['quality_label'].map(quality_labeled)
data.head()

!pip install scikit-learn
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
from sklearn.metrics import accuracy_score,classification_report

correlations=data.corr()['quality_label']
print(correlations)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
x=data.drop(["quality_label"],axis=1)
y=data["quality_label"]
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
model=DecisionTreeClassifier(max_depth=3,random_state=42)
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
accuarcy=accuracy_score(y_test,y_pred)
print(accuarcy)
print(classification_report(y_test,y_pred))